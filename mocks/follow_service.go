// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// FollowService is an autogenerated mock type for the FollowService type
type FollowService struct {
	mock.Mock
}

type FollowService_Expecter struct {
	mock *mock.Mock
}

func (_m *FollowService) EXPECT() *FollowService_Expecter {
	return &FollowService_Expecter{mock: &_m.Mock}
}

// Follow provides a mock function with given fields: ctx, followerID, followeeID
func (_m *FollowService) Follow(ctx context.Context, followerID int64, followeeID int64) error {
	ret := _m.Called(ctx, followerID, followeeID)

	if len(ret) == 0 {
		panic("no return value specified for Follow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, followerID, followeeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FollowService_Follow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Follow'
type FollowService_Follow_Call struct {
	*mock.Call
}

// Follow is a helper method to define mock.On call
//   - ctx context.Context
//   - followerID int64
//   - followeeID int64
func (_e *FollowService_Expecter) Follow(ctx interface{}, followerID interface{}, followeeID interface{}) *FollowService_Follow_Call {
	return &FollowService_Follow_Call{Call: _e.mock.On("Follow", ctx, followerID, followeeID)}
}

func (_c *FollowService_Follow_Call) Run(run func(ctx context.Context, followerID int64, followeeID int64)) *FollowService_Follow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *FollowService_Follow_Call) Return(_a0 error) *FollowService_Follow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FollowService_Follow_Call) RunAndReturn(run func(context.Context, int64, int64) error) *FollowService_Follow_Call {
	_c.Call.Return(run)
	return _c
}

// GetFollowees provides a mock function with given fields: ctx, followerID, limit, page
func (_m *FollowService) GetFollowees(ctx context.Context, followerID int64, limit int32, page int32) ([]int64, error) {
	ret := _m.Called(ctx, followerID, limit, page)

	if len(ret) == 0 {
		panic("no return value specified for GetFollowees")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int32, int32) ([]int64, error)); ok {
		return rf(ctx, followerID, limit, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int32, int32) []int64); ok {
		r0 = rf(ctx, followerID, limit, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int32, int32) error); ok {
		r1 = rf(ctx, followerID, limit, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FollowService_GetFollowees_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowees'
type FollowService_GetFollowees_Call struct {
	*mock.Call
}

// GetFollowees is a helper method to define mock.On call
//   - ctx context.Context
//   - followerID int64
//   - limit int32
//   - page int32
func (_e *FollowService_Expecter) GetFollowees(ctx interface{}, followerID interface{}, limit interface{}, page interface{}) *FollowService_GetFollowees_Call {
	return &FollowService_GetFollowees_Call{Call: _e.mock.On("GetFollowees", ctx, followerID, limit, page)}
}

func (_c *FollowService_GetFollowees_Call) Run(run func(ctx context.Context, followerID int64, limit int32, page int32)) *FollowService_GetFollowees_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int32), args[3].(int32))
	})
	return _c
}

func (_c *FollowService_GetFollowees_Call) Return(_a0 []int64, _a1 error) *FollowService_GetFollowees_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FollowService_GetFollowees_Call) RunAndReturn(run func(context.Context, int64, int32, int32) ([]int64, error)) *FollowService_GetFollowees_Call {
	_c.Call.Return(run)
	return _c
}

// GetFollowers provides a mock function with given fields: ctx, followeeID, limit, page
func (_m *FollowService) GetFollowers(ctx context.Context, followeeID int64, limit int32, page int32) ([]int64, error) {
	ret := _m.Called(ctx, followeeID, limit, page)

	if len(ret) == 0 {
		panic("no return value specified for GetFollowers")
	}

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int32, int32) ([]int64, error)); ok {
		return rf(ctx, followeeID, limit, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int32, int32) []int64); ok {
		r0 = rf(ctx, followeeID, limit, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int32, int32) error); ok {
		r1 = rf(ctx, followeeID, limit, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FollowService_GetFollowers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowers'
type FollowService_GetFollowers_Call struct {
	*mock.Call
}

// GetFollowers is a helper method to define mock.On call
//   - ctx context.Context
//   - followeeID int64
//   - limit int32
//   - page int32
func (_e *FollowService_Expecter) GetFollowers(ctx interface{}, followeeID interface{}, limit interface{}, page interface{}) *FollowService_GetFollowers_Call {
	return &FollowService_GetFollowers_Call{Call: _e.mock.On("GetFollowers", ctx, followeeID, limit, page)}
}

func (_c *FollowService_GetFollowers_Call) Run(run func(ctx context.Context, followeeID int64, limit int32, page int32)) *FollowService_GetFollowers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int32), args[3].(int32))
	})
	return _c
}

func (_c *FollowService_GetFollowers_Call) Return(_a0 []int64, _a1 error) *FollowService_GetFollowers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FollowService_GetFollowers_Call) RunAndReturn(run func(context.Context, int64, int32, int32) ([]int64, error)) *FollowService_GetFollowers_Call {
	_c.Call.Return(run)
	return _c
}

// Unfollow provides a mock function with given fields: ctx, followerID, followeeID
func (_m *FollowService) Unfollow(ctx context.Context, followerID int64, followeeID int64) error {
	ret := _m.Called(ctx, followerID, followeeID)

	if len(ret) == 0 {
		panic("no return value specified for Unfollow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, followerID, followeeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FollowService_Unfollow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unfollow'
type FollowService_Unfollow_Call struct {
	*mock.Call
}

// Unfollow is a helper method to define mock.On call
//   - ctx context.Context
//   - followerID int64
//   - followeeID int64
func (_e *FollowService_Expecter) Unfollow(ctx interface{}, followerID interface{}, followeeID interface{}) *FollowService_Unfollow_Call {
	return &FollowService_Unfollow_Call{Call: _e.mock.On("Unfollow", ctx, followerID, followeeID)}
}

func (_c *FollowService_Unfollow_Call) Run(run func(ctx context.Context, followerID int64, followeeID int64)) *FollowService_Unfollow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *FollowService_Unfollow_Call) Return(_a0 error) *FollowService_Unfollow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FollowService_Unfollow_Call) RunAndReturn(run func(context.Context, int64, int64) error) *FollowService_Unfollow_Call {
	_c.Call.Return(run)
	return _c
}

// NewFollowService creates a new instance of FollowService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFollowService(t interface {
	mock.TestingT
	Cleanup(func())
}) *FollowService {
	mock := &FollowService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
