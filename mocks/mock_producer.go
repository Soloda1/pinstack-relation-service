// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	model "pinstack-relation-service/internal/model"

	mock "github.com/stretchr/testify/mock"

	service "pinstack-relation-service/internal/service"
)

// KafkaProducer is an autogenerated mock type for the KafkaProducer type
type KafkaProducer struct {
	mock.Mock
}

type KafkaProducer_Expecter struct {
	mock *mock.Mock
}

func (_m *KafkaProducer) EXPECT() *KafkaProducer_Expecter {
	return &KafkaProducer_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *KafkaProducer) Close() {
	_m.Called()
}

// KafkaProducer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type KafkaProducer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *KafkaProducer_Expecter) Close() *KafkaProducer_Close_Call {
	return &KafkaProducer_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *KafkaProducer_Close_Call) Run(run func()) *KafkaProducer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KafkaProducer_Close_Call) Return() *KafkaProducer_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *KafkaProducer_Close_Call) RunAndReturn(run func()) *KafkaProducer_Close_Call {
	_c.Run(run)
	return _c
}

// SendMessage provides a mock function with given fields: ctx, event
func (_m *KafkaProducer) SendMessage(ctx context.Context, event model.OutboxEvent) <-chan service.SendResult {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 <-chan service.SendResult
	if rf, ok := ret.Get(0).(func(context.Context, model.OutboxEvent) <-chan service.SendResult); ok {
		r0 = rf(ctx, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan service.SendResult)
		}
	}

	return r0
}

// KafkaProducer_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type KafkaProducer_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - event model.OutboxEvent
func (_e *KafkaProducer_Expecter) SendMessage(ctx interface{}, event interface{}) *KafkaProducer_SendMessage_Call {
	return &KafkaProducer_SendMessage_Call{Call: _e.mock.On("SendMessage", ctx, event)}
}

func (_c *KafkaProducer_SendMessage_Call) Run(run func(ctx context.Context, event model.OutboxEvent)) *KafkaProducer_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.OutboxEvent))
	})
	return _c
}

func (_c *KafkaProducer_SendMessage_Call) Return(_a0 <-chan service.SendResult) *KafkaProducer_SendMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KafkaProducer_SendMessage_Call) RunAndReturn(run func(context.Context, model.OutboxEvent) <-chan service.SendResult) *KafkaProducer_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewKafkaProducer creates a new instance of KafkaProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKafkaProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *KafkaProducer {
	mock := &KafkaProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
