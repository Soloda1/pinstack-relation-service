// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	model "pinstack-relation-service/internal/model"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// OutboxRepository is an autogenerated mock type for the OutboxRepository type
type OutboxRepository struct {
	mock.Mock
}

type OutboxRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *OutboxRepository) EXPECT() *OutboxRepository_Expecter {
	return &OutboxRepository_Expecter{mock: &_m.Mock}
}

// AddEvent provides a mock function with given fields: ctx, _a1
func (_m *OutboxRepository) AddEvent(ctx context.Context, _a1 model.OutboxEvent) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OutboxEvent) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OutboxRepository_AddEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEvent'
type OutboxRepository_AddEvent_Call struct {
	*mock.Call
}

// AddEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 model.OutboxEvent
func (_e *OutboxRepository_Expecter) AddEvent(ctx interface{}, _a1 interface{}) *OutboxRepository_AddEvent_Call {
	return &OutboxRepository_AddEvent_Call{Call: _e.mock.On("AddEvent", ctx, _a1)}
}

func (_c *OutboxRepository_AddEvent_Call) Run(run func(ctx context.Context, _a1 model.OutboxEvent)) *OutboxRepository_AddEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.OutboxEvent))
	})
	return _c
}

func (_c *OutboxRepository_AddEvent_Call) Return(_a0 error) *OutboxRepository_AddEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OutboxRepository_AddEvent_Call) RunAndReturn(run func(context.Context, model.OutboxEvent) error) *OutboxRepository_AddEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventsForProcessing provides a mock function with given fields: ctx, limit
func (_m *OutboxRepository) GetEventsForProcessing(ctx context.Context, limit int) ([]model.OutboxEvent, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsForProcessing")
	}

	var r0 []model.OutboxEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]model.OutboxEvent, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []model.OutboxEvent); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.OutboxEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OutboxRepository_GetEventsForProcessing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsForProcessing'
type OutboxRepository_GetEventsForProcessing_Call struct {
	*mock.Call
}

// GetEventsForProcessing is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
func (_e *OutboxRepository_Expecter) GetEventsForProcessing(ctx interface{}, limit interface{}) *OutboxRepository_GetEventsForProcessing_Call {
	return &OutboxRepository_GetEventsForProcessing_Call{Call: _e.mock.On("GetEventsForProcessing", ctx, limit)}
}

func (_c *OutboxRepository_GetEventsForProcessing_Call) Run(run func(ctx context.Context, limit int)) *OutboxRepository_GetEventsForProcessing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *OutboxRepository_GetEventsForProcessing_Call) Return(_a0 []model.OutboxEvent, _a1 error) *OutboxRepository_GetEventsForProcessing_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OutboxRepository_GetEventsForProcessing_Call) RunAndReturn(run func(context.Context, int) ([]model.OutboxEvent, error)) *OutboxRepository_GetEventsForProcessing_Call {
	_c.Call.Return(run)
	return _c
}

// MarkEventAsPending provides a mock function with given fields: ctx, eventID
func (_m *OutboxRepository) MarkEventAsPending(ctx context.Context, eventID int64) error {
	ret := _m.Called(ctx, eventID)

	if len(ret) == 0 {
		panic("no return value specified for MarkEventAsPending")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, eventID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OutboxRepository_MarkEventAsPending_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkEventAsPending'
type OutboxRepository_MarkEventAsPending_Call struct {
	*mock.Call
}

// MarkEventAsPending is a helper method to define mock.On call
//   - ctx context.Context
//   - eventID int64
func (_e *OutboxRepository_Expecter) MarkEventAsPending(ctx interface{}, eventID interface{}) *OutboxRepository_MarkEventAsPending_Call {
	return &OutboxRepository_MarkEventAsPending_Call{Call: _e.mock.On("MarkEventAsPending", ctx, eventID)}
}

func (_c *OutboxRepository_MarkEventAsPending_Call) Run(run func(ctx context.Context, eventID int64)) *OutboxRepository_MarkEventAsPending_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *OutboxRepository_MarkEventAsPending_Call) Return(_a0 error) *OutboxRepository_MarkEventAsPending_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OutboxRepository_MarkEventAsPending_Call) RunAndReturn(run func(context.Context, int64) error) *OutboxRepository_MarkEventAsPending_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEventStatus provides a mock function with given fields: ctx, eventID, status, sentAt
func (_m *OutboxRepository) UpdateEventStatus(ctx context.Context, eventID int64, status model.OutboxStatus, sentAt *time.Time) error {
	ret := _m.Called(ctx, eventID, status, sentAt)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEventStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, model.OutboxStatus, *time.Time) error); ok {
		r0 = rf(ctx, eventID, status, sentAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OutboxRepository_UpdateEventStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEventStatus'
type OutboxRepository_UpdateEventStatus_Call struct {
	*mock.Call
}

// UpdateEventStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - eventID int64
//   - status model.OutboxStatus
//   - sentAt *time.Time
func (_e *OutboxRepository_Expecter) UpdateEventStatus(ctx interface{}, eventID interface{}, status interface{}, sentAt interface{}) *OutboxRepository_UpdateEventStatus_Call {
	return &OutboxRepository_UpdateEventStatus_Call{Call: _e.mock.On("UpdateEventStatus", ctx, eventID, status, sentAt)}
}

func (_c *OutboxRepository_UpdateEventStatus_Call) Run(run func(ctx context.Context, eventID int64, status model.OutboxStatus, sentAt *time.Time)) *OutboxRepository_UpdateEventStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(model.OutboxStatus), args[3].(*time.Time))
	})
	return _c
}

func (_c *OutboxRepository_UpdateEventStatus_Call) Return(_a0 error) *OutboxRepository_UpdateEventStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OutboxRepository_UpdateEventStatus_Call) RunAndReturn(run func(context.Context, int64, model.OutboxStatus, *time.Time) error) *OutboxRepository_UpdateEventStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewOutboxRepository creates a new instance of OutboxRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOutboxRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OutboxRepository {
	mock := &OutboxRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
