// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	model "pinstack-relation-service/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// OutboxRepository is an autogenerated mock type for the OutboxRepository type
type OutboxRepository struct {
	mock.Mock
}

type OutboxRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *OutboxRepository) EXPECT() *OutboxRepository_Expecter {
	return &OutboxRepository_Expecter{mock: &_m.Mock}
}

// AddEvent provides a mock function with given fields: ctx, _a1
func (_m *OutboxRepository) AddEvent(ctx context.Context, _a1 model.OutboxEvent) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OutboxEvent) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OutboxRepository_AddEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEvent'
type OutboxRepository_AddEvent_Call struct {
	*mock.Call
}

// AddEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 model.OutboxEvent
func (_e *OutboxRepository_Expecter) AddEvent(ctx interface{}, _a1 interface{}) *OutboxRepository_AddEvent_Call {
	return &OutboxRepository_AddEvent_Call{Call: _e.mock.On("AddEvent", ctx, _a1)}
}

func (_c *OutboxRepository_AddEvent_Call) Run(run func(ctx context.Context, _a1 model.OutboxEvent)) *OutboxRepository_AddEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.OutboxEvent))
	})
	return _c
}

func (_c *OutboxRepository_AddEvent_Call) Return(_a0 error) *OutboxRepository_AddEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OutboxRepository_AddEvent_Call) RunAndReturn(run func(context.Context, model.OutboxEvent) error) *OutboxRepository_AddEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewOutboxRepository creates a new instance of OutboxRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOutboxRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OutboxRepository {
	mock := &OutboxRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
